/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package databaseassignment;

import DBHandler.DbConnector;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

/**
 *
 * @author Shaafi
 */
public class MainJFrame extends javax.swing.JFrame {

//    global variables
    public static DbConnector mConnector = null;
    public static String dbName = null;

//    locally global variables
    private static String selectedTable = null;
    private DefaultTableModel mTableModel = null; // table model to show the table data to user
    private int tableRowIndex;

    /**
     * Creates new form MainJFrame
     */
    public MainJFrame() {

        this.setTitle("Database Managment Assignment");

//        remove this for main presentation
//        mConnector = new DbConnector("university_database", "root", "");
//        dbName = "university_database";

        initComponents();
        tableNames_comboBox.removeAllItems();

        if (mConnector != null && dbName != null) {
            dbName_label.setText("Connected to : " + dbName);

            dbConnectBtn.setText("Disconnect");

            setComboBoxForTables();

//            activeEditing();
        } else {
            dbName_label.setText("Not connected to any database");
        }

        deactiveEditing();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dbConnectBtn = new javax.swing.JButton();
        dbName_label = new javax.swing.JLabel();
        tableNames_comboBox = new javax.swing.JComboBox<>();
        insertDataBtn = new javax.swing.JButton();
        deleteDataBtn = new javax.swing.JButton();
        deleteColumnBtn = new javax.swing.JButton();
        insertColumnBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        dataTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(null);
        setMinimumSize(new java.awt.Dimension(650, 500));
        setName("Home"); // NOI18N
        setSize(new java.awt.Dimension(650, 500));

        dbConnectBtn.setText("Connect");
        dbConnectBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dbConnectBtnActionPerformed(evt);
            }
        });

        dbName_label.setBackground(new java.awt.Color(255, 51, 51));
        dbName_label.setForeground(new java.awt.Color(0, 0, 204));
        dbName_label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        dbName_label.setText("Connected to : Someting Database");
        dbName_label.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        tableNames_comboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        insertDataBtn.setText("Insert Data");
        insertDataBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertDataBtnActionPerformed(evt);
            }
        });

        deleteDataBtn.setText("Delete Data");
        deleteDataBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteDataBtnActionPerformed(evt);
            }
        });

        deleteColumnBtn.setText("Delete Column");
        deleteColumnBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteColumnBtnActionPerformed(evt);
            }
        });

        insertColumnBtn.setText("Insert Column");
        insertColumnBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertColumnBtnActionPerformed(evt);
            }
        });

        dataTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(dataTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(insertDataBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(deleteDataBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)
                        .addComponent(insertColumnBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(deleteColumnBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 4, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(dbConnectBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(dbName_label, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(tableNames_comboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dbConnectBtn)
                    .addComponent(dbName_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tableNames_comboBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(insertDataBtn)
                    .addComponent(deleteDataBtn)
                    .addComponent(insertColumnBtn)
                    .addComponent(deleteColumnBtn))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void dbConnectBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dbConnectBtnActionPerformed

        if (mConnector == null) {

            ConnectionJFrame jFrame = new ConnectionJFrame();

            // center the jframe on screen
            jFrame.setLocationRelativeTo(null);

            jFrame.setVisible(true);
            this.dispose();
        } else {
            mConnector.closeConnection();
            System.exit(0);
        }
    }//GEN-LAST:event_dbConnectBtnActionPerformed

    private void insertDataBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertDataBtnActionPerformed

        InsertJFrame jFrame = new InsertJFrame();

        // center the jframe on screen
        jFrame.setLocationRelativeTo(null);

        jFrame.setVisible(true);
    }//GEN-LAST:event_insertDataBtnActionPerformed

    private void deleteDataBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteDataBtnActionPerformed

        int selectedRow = dataTable.getSelectedRow();

        System.out.println("selected row: " + selectedRow);

        boolean res = mConnector.deleteData(selectedTable, dataTable.getColumnName(0), String.valueOf(dataTable.getValueAt(selectedRow, 0)));

        if (res) {
            JOptionPane.showMessageDialog(null, "Deleted Successfully");
            revalidate();
            repaint();
        } else {
            JOptionPane.showMessageDialog(null, "Data not deleted");
        }
    }//GEN-LAST:event_deleteDataBtnActionPerformed

    private void insertColumnBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertColumnBtnActionPerformed

        String colName = JOptionPane.showInputDialog(null, "Enter Column Name and data type: (Comma(,) separated)",
                "Insert Column", JOptionPane.QUESTION_MESSAGE);
        System.out.println("msg: " + colName);

        if (colName != null && !colName.isEmpty()) {

            boolean res = mConnector.addColumn(selectedTable, colName);

            if (res) {
                JOptionPane.showMessageDialog(null, "Column added Successfully");
                loadTable(selectedTable);
                revalidate();
                repaint();
            } else {
                JOptionPane.showMessageDialog(null, "Column not added");
            }
        } else if (colName != null && colName.isEmpty()){
            JOptionPane.showMessageDialog(null, "Give column name and data type");
        }
    }//GEN-LAST:event_insertColumnBtnActionPerformed

    private void deleteColumnBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteColumnBtnActionPerformed
        ArrayList<String> cols = mConnector.getColumns(selectedTable);

        String[] colNames = new String[cols.size()];

        for (int i = 0; i < cols.size(); i++) {
            colNames[i] = cols.get(i);
        }

        String selectedColumn = (String) JOptionPane.showInputDialog(null,
                "Select Column For Deleting:",
                "Delete Column",
                JOptionPane.QUESTION_MESSAGE,
                null,
                colNames,
                colNames[0]
        );

        System.out.println("selected: " + selectedColumn);
        
        if (selectedColumn != null && !selectedColumn.isEmpty()) {
            boolean res = mConnector.deleteColumn(selectedTable, selectedColumn);
            if (res) {
                loadTable(selectedTable);
                revalidate();
                repaint();
            }
        }

    }//GEN-LAST:event_deleteColumnBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable dataTable;
    private javax.swing.JButton dbConnectBtn;
    private javax.swing.JLabel dbName_label;
    private javax.swing.JButton deleteColumnBtn;
    private javax.swing.JButton deleteDataBtn;
    private javax.swing.JButton insertColumnBtn;
    private javax.swing.JButton insertDataBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> tableNames_comboBox;
    // End of variables declaration//GEN-END:variables

    private void setComboBoxForTables() {

        tableNames_comboBox.addItem("");
        selectedTable = null;

        for (String table: mConnector.getTableNames()) {
            tableNames_comboBox.addItem(table);
        }

        int tableCounts = mConnector.getTableNames().size();

        tableNames_comboBox.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                System.out.println("Selected: " + tableNames_comboBox.getItemAt(tableNames_comboBox.getSelectedIndex()));

                selectedTable = tableNames_comboBox.getItemAt(tableNames_comboBox.getSelectedIndex());

                if (selectedTable == null || selectedTable.isEmpty()) {
                    dataTable.setVisible(false);
                    dataTable.removeAll();

                } else {
                    activeEditing();
                    if (tableNames_comboBox.getItemCount() > tableCounts) {
                        tableNames_comboBox.removeItemAt(0);
                    }
                    dataTable.setVisible(true);
                    loadTable(selectedTable);
                }
            }
        });
    }

//    loding the table with table data
    private void loadTable(String selectedTable) {

        ArrayList<String[]> tableData = mConnector.getTableData(selectedTable);

        mTableModel = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        // adding the rows in the model
        for (int i = 0; i < tableData.size(); i++) {
            if (i == 0) {
                for (String colName : tableData.get(i)) {
                    mTableModel.addColumn(colName);
                }
            } else {
                mTableModel.addRow(tableData.get(i));
            }
        }
        JTableHeader th = dataTable.getTableHeader();
        th.setBackground(Color.GREEN);
        th.setFont( new Font( "Arial" , Font.BOLD, 13 ));

        dataTable.removeAll(); // removing all previous data from table
        dataTable.setModel(mTableModel); // adding new data list in the table

        dataTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        dataTable.setColumnSelectionAllowed(false);
        dataTable.setRowSelectionAllowed(true);

        dataTable.setRowSelectionInterval(0, 0);

    }

    private void activeEditing() {

        if (selectedTable != null) {
            insertDataBtn.setEnabled(true);
            deleteDataBtn.setEnabled(true);

            insertColumnBtn.setEnabled(true);
            deleteColumnBtn.setEnabled(true);
            dataTable.setVisible(true);
            dataTable.setEnabled(true);
        }
    }

    private void deactiveEditing() {
        insertDataBtn.setEnabled(false);
        deleteDataBtn.setEnabled(false);

        insertColumnBtn.setEnabled(false);
        deleteColumnBtn.setEnabled(false);

        dataTable.setVisible(false);
        dataTable.setEnabled(false);
    }

    public static String getSelectedTableName() {
        return selectedTable;
    }
}
